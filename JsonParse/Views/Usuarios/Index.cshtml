@model ReflectionIT.Mvc.Paging.PagingList<JsonParse.Models.Usuario>
@using ReflectionIT.Mvc.Paging
@addTagHelper *, Reflection.Mvc.Paging
@{
    ViewData["title"] = "Clientes";
}

@if (ViewBag.usuario != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        O usuário @ViewBag.usuario <strong>não possui</strong> nenhuma conta cadastrada.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<div class="row">
    <div class="col-sm-12 col-md-6">
        <h1 class="mb-4">Lista dos seus clientes</h1>
    </div>
    <div class="mb-3 mb-md-0 col-sm-12 col-md-6 d-flex align-items-sm-start justify-content-sm-start align-items-md-center justify-content-md-end">
            <form method="get" class="form-inline" asp-action="Index">
                <input type="text" class="form-control mr-2" style="width: 140px;" name="SearchString" placeholder="Buscar por..." value="@Model.RouteValue["SearchString"]">
                <button class="btn btn-outline-primary" type="submit"><i class="fas fa-search"></i></button>
            </form>
    </div>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th class="align-middle">
                @Html.SortableHeaderFor(model => model.Nome)
            </th>
            <th class="align-middle">
                @Html.SortableHeaderFor(model => model.Email)
            </th>
            <th class="align-middle">
                @Html.SortableHeaderFor(model => model.Fone)
            </th>
            <th class="align-middle">
                <a class="btn btn-primary" asp-action="Create"><i class="fas fa-plus-circle"></i> Cadastrar</a>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td class="align-middle">
                    @Html.DisplayFor(modelItem => item.Nome)
                </td>
                <td class="align-middle">
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td class="align-middle">
                    @Html.DisplayFor(modelItem => item.Fone)
                </td>
                <td class="align-middle">
                    <div class="dropdown">
                        <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="fas fa-cog"></i> Ações
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" asp-controller="Contas" asp-action="Create" asp-route-id="@item.UsuarioId"><i class="fas fa-plus-circle"></i> Conta</a>
                            <a class="dropdown-item" asp-action="Edit" asp-route-id="@item.UsuarioId"><i class="fas fa-user-edit text-primary"></i> Editar</a>
                            <a class="dropdown-item" asp-action="Details" asp-route-id="@item.UsuarioId"><i class="fas fa-file-invoice-dollar text-success"></i> Detalhes</a>
                            <a class="dropdown-item" asp-action="Delete" asp-route-id="@item.UsuarioId" onclick="return confirm('Você tem certeza disso?')"><i class="fas fa-trash text-danger"></i> Deletar</a>
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>

<nav aria-label="Cliente paging">
    @await this.Component.InvokeAsync("Pager", new { pagingList = this.Model })
</nav>